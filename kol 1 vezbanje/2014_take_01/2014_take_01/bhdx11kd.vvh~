
// 2014_take_01View.cpp : implementation of the CMy2014take01View class
//

#include "pch.h"
#include "framework.h"
// SHARED_HANDLERS can be defined in an ATL project implementing preview, thumbnail
// and search filter handlers and allows sharing of document code with that project.
#ifndef SHARED_HANDLERS
#include "2014_take_01.h"
#endif

#include "2014_take_01Doc.h"
#include "2014_take_01View.h"
#include "corecrt_math_defines.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
#include <vector>


// CMy2014take01View

IMPLEMENT_DYNCREATE(CMy2014take01View, CView)

BEGIN_MESSAGE_MAP(CMy2014take01View, CView)
	// Standard printing commands
	ON_COMMAND(ID_FILE_PRINT, &CView::OnFilePrint)
	ON_COMMAND(ID_FILE_PRINT_DIRECT, &CView::OnFilePrint)
	ON_COMMAND(ID_FILE_PRINT_PREVIEW, &CView::OnFilePrintPreview)
END_MESSAGE_MAP()

// CMy2014take01View construction/destruction

CMy2014take01View::CMy2014take01View() noexcept
{
	// TODO: add construction code here
	

}

CMy2014take01View::~CMy2014take01View()
{
}

BOOL CMy2014take01View::PreCreateWindow(CREATESTRUCT& cs)
{
	// TODO: Modify the Window class or styles here by modifying
	//  the CREATESTRUCT cs

	return CView::PreCreateWindow(cs);
}

// CMy2014take01View drawing

void CMy2014take01View::OnDraw(CDC* pDC)
{
	CMy2014take01Doc* pDoc = GetDocument();
	ASSERT_VALID(pDoc);
	if (!pDoc)
		return;

	// TODO: add draw code for native data here

	CRect rect;
	GetClientRect(&rect);
	Width = rect.Width();
	Height = rect.Height();
	CBrush *oldBrush;
	CBrush c01 = (BS_SOLID, 3, RGB(0, 100, 180));
	oldBrush = pDC->SelectObject(&c01);
	pDC->Rectangle(0, 0, Width, Height);
	DrawGround(pDC, 30);
}

void CMy2014take01View::DrawGround(CDC* pDC, float angle) {
	//ugao je u stepenima
	//donji levi ugao prozora
	//okriv: 3, braon, ispuna:srafura braon-svetlo-zelena
	//ostatak svetlo plavo
	auto angleRad = (angle * M_PI) / 180;
	int triangleHeight = Width * tan(angleRad);
	std::vector<CPoint> tacke;
	tacke.push_back({ 0, Height });
	tacke.push_back({ Width, Height });
	tacke.push_back({ Width, Height - triangleHeight });
	CBrush* oldBrush;
	CBrush n = (BS_SOLID, 3, RGB(0, 200, 0));
	oldBrush = pDC->SelectObject(&n);
	pDC->Polygon(tacke.data(), tacke.size());
	pDC->SelectObject(oldBrush);

}


// CMy2014take01View printing

BOOL CMy2014take01View::OnPreparePrinting(CPrintInfo* pInfo)
{
	// default preparation
	return DoPreparePrinting(pInfo);
}

void CMy2014take01View::OnBeginPrinting(CDC* /*pDC*/, CPrintInfo* /*pInfo*/)
{
	// TODO: add extra initialization before printing
}

void CMy2014take01View::OnEndPrinting(CDC* /*pDC*/, CPrintInfo* /*pInfo*/)
{
	// TODO: add cleanup after printing
}


// CMy2014take01View diagnostics

#ifdef _DEBUG
void CMy2014take01View::AssertValid() const
{
	CView::AssertValid();
}

void CMy2014take01View::Dump(CDumpContext& dc) const
{
	CView::Dump(dc);
}

CMy2014take01Doc* CMy2014take01View::GetDocument() const // non-debug version is inline
{
	ASSERT(m_pDocument->IsKindOf(RUNTIME_CLASS(CMy2014take01Doc)));
	return (CMy2014take01Doc*)m_pDocument;
}
#endif //_DEBUG


// CMy2014take01View message handlers
